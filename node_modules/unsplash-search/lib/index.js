"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var cross_fetch_1 = require("cross-fetch");
var query_string_1 = require("query-string");
var abstracts_1 = require("./typings/abstracts");
var interface_1 = require("./typings/interface");
var errors_1 = require("./constants/errors");
var index_1 = require("./constants/index");
var UnsplashSearch = (function (_super) {
    __extends(UnsplashSearch, _super);
    function UnsplashSearch(accessKey, perPage) {
        if (perPage === void 0) { perPage = 10; }
        var _this = _super.call(this, accessKey, Math.min(perPage, index_1.API_PAGE_MAX_ITEM)) || this;
        _this.queryLimit = 0;
        _this.queryRemains = 0;
        _this.searchAll = function (query, page) {
            return _this.search(query, page, interface_1.Orientation.ALL);
        };
        _this.searchLandscapes = function (query, page) {
            return _this.search(query, page, interface_1.Orientation.LANDSCAPE);
        };
        _this.searchPortraits = function (query, page) {
            return _this.search(query, page, interface_1.Orientation.PORTRAIT);
        };
        _this.searchSquares = function (query, page) {
            return _this.search(query, page, interface_1.Orientation.SQUARISH);
        };
        _this.getQueryLimit = function () { return _this.queryLimit; };
        _this.getRemaingQuery = function () { return _this.queryRemains; };
        _this.getItemsPerPage = function () { return _this.perPage; };
        _this.setItemsPerPage = function (limit) {
            if (limit === void 0) { limit = 10; }
            _this.perPage = Math.min(limit, index_1.API_PAGE_MAX_ITEM);
        };
        _this.fetcher = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var url, fetchParams, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = index_1.API_SEARCH_URL + query_string_1.stringify(params);
                        fetchParams = {
                            headers: {
                                'Accept-Version': index_1.API_VERSION,
                                Authorization: 'Client-ID ' + this.accessKey,
                            },
                        };
                        return [4, cross_fetch_1.default(url, fetchParams)
                                .then(function (response) {
                                var headers = response.headers;
                                if (headers.has(index_1.X_LIMIT) && headers.has(index_1.X_REMAIN)) {
                                    _this.queryLimit = parseInt(headers.get(index_1.X_LIMIT) || '0', 10);
                                    _this.queryRemains = parseInt(headers.get(index_1.X_REMAIN) || '0', 10);
                                }
                                return response.json();
                            })
                                .then(function (json) { return JSON.stringify(json); })
                                .catch(function (error) { return error.message; })];
                    case 1:
                        result = _a.sent();
                        return [2, result];
                }
            });
        }); };
        _this.filter = function (imgArray) {
            if (!Array.isArray(imgArray)) {
                throw new Error(errors_1.E_INVALID_JSON_DATA);
            }
            return imgArray.map(function (data) { return ({
                author: {
                    name: data.user.name,
                    picture: data.user.profile_image.small,
                    profile: data.user.links.html,
                },
                color: data.color,
                description: data.description,
                height: data.height,
                id: data.id,
                likes: data.likes,
                tags: data.tags.map(function (tag) { return tag.title; }),
                updated: data.updated_at,
                urls: {
                    creditLink: data.links.html,
                    full: data.urls.full,
                    raw: data.urls.raw,
                    thumb: data.urls.thumb,
                },
                width: data.width,
            }); });
        };
        _this.search = function (query, page, orientation) {
            if (page === void 0) { page = 1; }
            if (orientation === void 0) { orientation = interface_1.Orientation.ALL; }
            var params = {
                orientation: orientation,
                page: page,
                per_page: _this.perPage,
                query: query,
            };
            if (!params.query || params.query.length < 3) {
                throw new Error(errors_1.E_INVALID_SEARCH_TERM);
            }
            if (orientation === interface_1.Orientation.ALL) {
                delete params.orientation;
            }
            return _this.fetcher(params).then(function (result) {
                var json = JSON.parse(result);
                if (json.errors) {
                    throw new Error(json.errors);
                }
                return {
                    images: _this.filter(json.results),
                    totalImages: json.total,
                    totalPages: json.total_pages,
                };
            });
        };
        return _this;
    }
    return UnsplashSearch;
}(abstracts_1.default));
exports.default = UnsplashSearch;
//# sourceMappingURL=index.js.map